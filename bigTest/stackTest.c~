//
// Created by donal on 21/06/19.
//

#include "stack.h"
#include <ijvm.h>
#include <stddef.h>
#include <stdlib.h>

struct stack_node {
    word_t data;
    struct stack_node* next_node;
};

//struct stack_node* root = NULL;

bool is_empty(struct stack_node* root) {
    if (root == NULL) {
        return false;
    } else {
        return true;
    }
}

struct stack_node* new_node(word_t data) {
    struct stack_node* stackNode = malloc(sizeof(struct stack_node));
    stackNode->data = data;
    stackNode->next_node = NULL;
    return stackNode;
}

void push(struct stack_node** root, word_t data) {
    struct stack_node* stackNode = new_node(data);
    stackNode->next_node = *root;
    *root = stackNode;
    printf("Data pushed to stack: %d", data);
}

word_t pop(struct stack_node** root) {
    if(is_empty(*root)) {
        return NULL;
    }
    struct stack_node* temp = *root;
    *root = (*root)->next_node;
    word_t popped = temp->data;
    free(temp);

    return popped;
}

word_t peek(struct stack_node* root) {
    if(is_empty(root)) {
        return NULL;
    }
    return root->data;
}

int get_stack_size() { //QUESTION: is iterative or recursive way faster?
    if (root == NULL) {
        return 0;
    } else {
        return 1 + get_stack_size(root->next_node);
    }
}

word_t tos() {
    return peek(root);
}

int main() 
{ 
    struct StackNode* root = NULL; 
  
    push(&root, 10); 
    push(&root, 20); 
    push(&root, 30); 
  
    printf("%d popped from stack\n", pop(&root)); 
  
    printf("Top element is %d\n", peek(root)); 
  
    return 0; 
} 
